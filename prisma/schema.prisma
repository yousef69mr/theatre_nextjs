// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  ACTOR
  CAST_HEAD
  CAST_VICE_PRESIDENT
}

// Auth models

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)

  isTwoFactorEnabled Boolean @default(false)
  isEditable         Boolean @default(true)

  twoFactorConfirmation TwoFactorConfirmation?

  actor    UserActorLink?
  executor UserExecutorLink?

  accounts Account[]
  tickets  Ticket[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId])
}

// 

model CastMember {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  role UserRole @default(ACTOR)

  actorId String? @db.ObjectId
  actor   Actor?  @relation(fields: [actorId], references: [id], onDelete: Cascade)
  // actor Actor?

  startDate DateTime
  endDate   DateTime?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([role, actorId])
  @@index([actorId])
}

model Festival {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  imgUrl      String?
  description String?

  plays     PlayFestival[]
  Award     Award[]
  actors    ActorInPlay[]
  executors ExecutorInPlay[]
  tickets   Ticket[]
  mediae    Media[]

  isPublished Boolean @default(true)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum MediaEnum {
  IMAGE
  VIDEO
}

model ActorMedia {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  actorId String @db.ObjectId
  actor   Actor  @relation(fields: [actorId], references: [id])

  mediaId String @db.ObjectId
  media   Media  @relation(fields: [actorId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([actorId, mediaId])
  @@index([actorId])
  @@index([mediaId])
}

model Media {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  mediaUrl String
  type     MediaEnum

  playId String? @db.ObjectId
  play   Play?   @relation(fields: [playId], references: [id], onDelete: Cascade)

  festivalId String?   @db.ObjectId
  festival   Festival? @relation(fields: [festivalId], references: [id])

  actors ActorMedia[]

  isPublished Boolean @default(true)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([playId])
  @@index([festivalId])
}

model PlayFestival {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  position         Int?
  seatsLimit       Int    @default(0)
  availableSeats   Int    @default(0)
  actorTicketLimit Int    @default(8)
  guestTicketLimit Int    @default(1)

  showTimes DateTime[]
  // images    String[]

  playId String @db.ObjectId
  play   Play   @relation(fields: [playId], references: [id], onDelete: Cascade)

  festivalId String   @db.ObjectId
  festival   Festival @relation(fields: [festivalId], references: [id], onDelete: Cascade)

  @@unique([festivalId, playId])
  @@index([festivalId])
  @@index([playId])
}

model Play {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  videoUrl     String?
  posterImgUrl String?
  numOfViews   BigInt  @default(0)

  // showtimes               PlayShowtime[]
  festivals PlayFestival[]
  actors    ActorInPlay[]
  awards    Award[]
  executors ExecutorInPlay[]
  tickets   Ticket[]
  mediae    Media[]

  isPublished Boolean @default(true)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model ActorInPlay {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  characterNames String[]

  playId String @db.ObjectId
  play   Play   @relation(fields: [playId], references: [id], onDelete: Cascade)

  actorId String @db.ObjectId
  actor   Actor  @relation(fields: [actorId], references: [id], onDelete: Cascade)

  festivalId String   @db.ObjectId
  festival   Festival @relation(fields: [festivalId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([actorId, playId, festivalId])
  @@index([actorId])
  @@index([playId])
  @@index([festivalId])
}

enum FacultyCast {
  LAW
  ENGINEERING
  MEDICINE
  SCIENCE
  PHARMACY
  COMMERCE
  ARTS
  AGRICULTURE
  DENTISTRY
  COMPUTERS
  EDUCATION
  ECONOMICS
  ARCHAEOLOGY
  NURSING
  SPECIFIC_EDUCATION
  VETERINARY
  PHYSICAL
  MASS
  // FINE_ARTS
  CHILDHOOD
  DAR_ULOOM
  OTHER
}

model Actor {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  imgUrl      String
  nickname    String?
  description String?
  facultyCast FacultyCast @default(OTHER)
  numOfViews  BigInt      @default(0)

  user UserActorLink?

  executor ActorExecutorLink?

  castMembers CastMember[]
  // castMember CastMember?
  // playId String? @db.ObjectId
  // Play   Play?   @relation(fields: [playId], references: [id])

  plays  ActorInPlay[]
  awards Award[]
  mediae ActorMedia[]
  // Executor Executor[]

  isPublished Boolean @default(true)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  // @@index([playId])
}

enum ExecutorRole {
  DIRECTOR
  AUTHOR
  EXECUTIVE_DIRECTOR
  CO_DIRECTOR
  ACTING_COACH
  ADVERTISING
  MUSIC_EXECUTION
  SOUND_DESIGNER
  LIGHTING_DESIGNER
  ASSISTANT_DIRECTOR
  DECOR_DESIGNER
  CAMERA_MAN
  COSMATICS_DESIGNER
  COSTUME_DESIGNER
  OTHER
}

model ExecutorInPlay {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  role ExecutorRole @default(OTHER)

  playId String @db.ObjectId
  play   Play   @relation(fields: [playId], references: [id], onDelete: Cascade)

  executorId String   @db.ObjectId
  executor   Executor @relation(fields: [executorId], references: [id], onDelete: Cascade)

  festivalId String   @db.ObjectId
  festival   Festival @relation(fields: [festivalId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([executorId, playId, festivalId, role])
  @@index([executorId])
  @@index([playId])
  @@index([festivalId])
}

model Executor {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  description String?
  imgUrl      String?
  nickname    String?
  numOfViews  BigInt  @default(0)

  user  UserExecutorLink?
  actor ActorExecutorLink?

  awards Award[]
  plays  ExecutorInPlay[]

  isPublished Boolean @default(true)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Award {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  postion         Int
  acquisitionDate DateTime

  playId String @db.ObjectId
  play   Play   @relation(fields: [playId], references: [id])

  actorId String? @db.ObjectId
  actor   Actor?  @relation(fields: [actorId], references: [id])

  executorId String?   @db.ObjectId
  executor   Executor? @relation(fields: [actorId], references: [id])

  festivalId String   @db.ObjectId
  festival   Festival @relation(fields: [festivalId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([playId])
  @@index([executorId])
  @@index([festivalId])
  @@index([actorId])
}

model Ticket {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  guestName  String
  seatNumber Int?
  price      Int     @default(0)
  isScanned  Boolean @default(false)

  showTime DateTime

  // create by user
  userId    String? @db.ObjectId
  createdBy User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  // update by admin
  // adminId    String? @db.ObjectId
  // createdFor User?   @relation(name: "createdFor", fields: [adminId], references: [id], onDelete: SetNull)

  playId String @db.ObjectId
  play   Play   @relation(fields: [playId], references: [id], onDelete: Cascade)

  festivalId String   @db.ObjectId
  festival   Festival @relation(fields: [festivalId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  // @@unique([seatNumber, playId, festivalId])
  @@index([playId])
  @@index([festivalId])
  @@index([userId])
}

////////////////////////////////

model UserActorLink {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  actorId String @unique @db.ObjectId
  actor   Actor  @relation(fields: [actorId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([actorId, userId])
}

model UserExecutorLink {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  executorId String   @unique @db.ObjectId
  executor   Executor @relation(fields: [executorId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([executorId, userId])
}

model ActorExecutorLink {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  actorId String @unique @db.ObjectId
  actor   Actor  @relation(fields: [actorId], references: [id], onDelete: Cascade)

  executorId String   @unique @db.ObjectId
  executor   Executor @relation(fields: [executorId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([executorId, actorId])
}
